import React from "react";
import { Section } from "@datawheel/canon-core";
import { withNamespaces } from "react-i18next";
import { BarChart, StackedArea } from "d3plus-react";
import { numeral } from "helpers/formatters";

import { institutionsColorScale } from "helpers/colors";

import { nest } from "d3-collection";
import { sum } from "d3-array";

import ChartTitle from "components/ChartTitle";

// NOTE: this component is currently not being used

class VulnerabilityByAdministration extends Section {
  state = {
    selected: "share"
  };

  render() {
    const { selected } = this.state;
    const { t, className, i18n } = this.props;
    const { geo } = this.context.data;

    const locale = i18n.language;
    const classSvg = "vulnerability-zone";

    const geoType =
      geo.type.substring(0, 1).toUpperCase() + geo.type.substring(1);

    let path = `/api/data?measures=Count&drilldowns=Priority,Administration,Year&captions=${locale}`;
    if (geo.depth > 0) path += `&${geoType}=${geo.key}`;

    return (
      <div className={className}>
        <ChartTitle
          className={classSvg}
          cube={"junaeb_vulnerability"}
          path={path}
          title="Vulnerability by School"
        />

        <BarChart
          className={classSvg}
          config={{
            data: path,
            height: 400,
            groupBy: ["ID Administration"],
            label: d => d["Administration"],
            stacked: true,
            time: "ID Year",
            x: "Priority",
            xSort: (a, b) => a["ID Year"] - b["ID Year"],
            shapeConfig: {
              fill: d => institutionsColorScale(d["ID Administration"])
            },
            xConfig: {
              labelRotation: false
            },
            tooltipConfig: {
              tbody: [
                [t("Share"), d => numeral(d["share"], locale).format("0.0%")],
                [t("Students"), d => numeral(d["Count"], locale).format("0,0")]
              ]
            },
            legendConfig: {
              label: d => d["Administration"],
              shapeConfig: {
                backgroundImage: d =>
                  "/images/legend/college/administration.png"
              }
            },
            yConfig: {
              tickFormat: d => (selected === "share" ? `${d * 100}%` : d)
            },
            y: selected
          }}
          dataFormat={resp => {
            const data = resp.data;
            nest()
              .key(d => d.Year)
              .entries(data)
              .forEach(group => {
                const total = sum(group.values, d => d["Count"]);
                group.values.forEach(d => (d.share = d["Count"] / total));
              });
            return data;
          }}
        />
        <div className="btn-group">
          <button
            className={`btn font-xxs ${
              selected === "Count" ? "is-active" : "is-inactive"
            }`}
            onClick={() => this.setState({ selected: "Count" })}
          >
            <span className="btn-text">{t("Number of Students")}</span>
          </button>
          <button
            className={`btn font-xxs ${
              selected === "share" ? "is-active" : "is-inactive"
            }`}
            onClick={() => this.setState({ selected: "share" })}
          >
            <span className="btn-text">{t("Share")}</span>
          </button>
        </div>
      </div>
    );
  }
}

export default withNamespaces()(VulnerabilityByAdministration);
